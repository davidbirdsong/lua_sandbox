diff -Naur /work/lua-5.1.5/CMakeLists.txt lua-5_1_5/CMakeLists.txt
--- /work/lua-5.1.5/CMakeLists.txt	1969-12-31 16:00:00.000000000 -0800
+++ lua-5_1_5/CMakeLists.txt	2014-11-27 10:36:18.352979806 -0800
@@ -0,0 +1,64 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
+project(lua C)
+
+set(LUA_SOURCE
+src/lapi.c
+src/lauxlib.c
+src/lbaselib.c
+src/lcode.c
+src/ldblib.c
+src/ldebug.c
+src/ldo.c
+src/ldump.c
+src/lfunc.c
+src/lgc.c
+src/linit.c
+src/liolib.c
+src/llex.c
+src/lmathlib.c
+src/lmem.c
+src/loadlib.c
+src/lobject.c
+src/lopcodes.c
+src/loslib.c
+src/lparser.c
+src/lstate.c
+src/lstring.c
+src/lstrlib.c
+src/ltable.c
+src/ltablib.c
+src/ltm.c
+src/lundump.c
+src/lvm.c
+src/lzio.c
+)
+
+set(CMAKE_INSTALL_PREFIX ${EP_BASE})
+if (WIN32)
+    add_library(lua SHARED ${LUA_SOURCE})
+    add_definitions(-DLUA_WIN)
+    add_definitions(-DLUA_BUILD_AS_DLL)
+    if (MINGW)
+        set_target_properties(lua PROPERTIES LINK_FLAGS -s)
+        if (ADDRESS_MODEL EQUAL 32)
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
+            set_target_properties(lua PROPERTIES LINK_FLAGS "-s -m32")
+        endif()
+    endif()
+elseif(APPLE)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
+    add_library(lua STATIC ${LUA_SOURCE})
+    add_definitions(-DLUA_USE_MACOSX)
+    target_link_libraries(lua -lreadline)
+else()
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
+    add_library(lua STATIC ${LUA_SOURCE})
+    add_definitions(-DLUA_USE_LINUX)
+endif()
+
+install(TARGETS lua DESTINATION lib)
+install(FILES src/lua.h src/luaconf.h src/lualib.h src/lauxlib.h DESTINATION include)
diff -Naur /work/lua-5.1.5/src/ldebug.c lua-5_1_5/src/ldebug.c
--- /work/lua-5.1.5/src/ldebug.c	2008-05-08 09:56:26.000000000 -0700
+++ lua-5_1_5/src/ldebug.c	2014-11-27 10:32:27.052988495 -0800
@@ -80,6 +80,10 @@
   return L->basehookcount;
 }

+LUA_API int lua_gethookcountremaining (lua_State *L) {
+  return L->hookcount;
+}
+

 LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {
   int status;
diff -Naur /work/lua-5.1.5/src/loslib.c lua-5_1_5/src/loslib.c
--- /work/lua-5.1.5/src/loslib.c	2008-01-18 08:38:18.000000000 -0800
+++ lua-5_1_5/src/loslib.c	2014-11-27 10:32:27.052988495 -0800
@@ -33,6 +33,61 @@
     return 3;
   }
 }
+/*
+** list of valid conversion specifiers for the 'strftime' function
+*/
+#if !defined(LUA_STRFTIMEOPTIONS)
+
+#if !defined(LUA_USE_POSIX)
+#define LUA_STRFTIMEOPTIONS	{ "aAbBcdHIjmMpSUwWxXyYzZ%", "" }
+#else
+#define LUA_STRFTIMEOPTIONS \
+	{ "aAbBcCdDeFgGhHIjklmMnprRSstTuUVwWxXyYzZ%", "" \
+	  "", "E", "cCxXyY",  \
+	  "O", "deHImMSuUVwWy" }
+#endif
+
+#endif
+
+
+
+/*
+** By default, Lua uses tmpnam except when POSIX is available, where it
+** uses mkstemp.
+*/
+#if defined(LUA_USE_MKSTEMP)
+#include <unistd.h>
+#define LUA_TMPNAMBUFSIZE	32
+#define lua_tmpnam(b,e) { \
+        strcpy(b, "/tmp/lua_XXXXXX"); \
+        e = mkstemp(b); \
+        if (e != -1) close(e); \
+        e = (e == -1); }
+
+#elif !defined(lua_tmpnam)
+
+#define LUA_TMPNAMBUFSIZE	L_tmpnam
+#define lua_tmpnam(b,e)		{ e = (tmpnam(b) == NULL); }
+
+#endif
+
+
+/*
+** By default, Lua uses gmtime/localtime, except when POSIX is available,
+** where it uses gmtime_r/localtime_r
+*/
+#if defined(LUA_USE_GMTIME_R)
+
+#define l_gmtime(t,r)		gmtime_r(t,r)
+#define l_localtime(t,r)	localtime_r(t,r)
+
+#elif !defined(l_gmtime)
+
+#define l_gmtime(t,r)		((void)r, gmtime(t))
+#define l_localtime(t,r)  	((void)r, localtime(t))
+
+#endif
+


 static int os_execute (lua_State *L) {
@@ -121,16 +176,40 @@
 }


+static const char *checkoption (lua_State *L, const char *conv, char *buff) {
+  static const char *const options[] = LUA_STRFTIMEOPTIONS;
+  unsigned int i;
+  for (i = 0; i < sizeof(options)/sizeof(options[0]); i += 2) {
+    if (*conv != '\0' && strchr(options[i], *conv) != NULL) {
+      buff[1] = *conv;
+      if (*options[i + 1] == '\0') {  /* one-char conversion specifier? */
+        buff[2] = '\0';  /* end buffer */
+        return conv + 1;
+      }
+      else if (*(conv + 1) != '\0' &&
+               strchr(options[i + 1], *(conv + 1)) != NULL) {
+        buff[2] = *(conv + 1);  /* valid two-char conversion specifier */
+        buff[3] = '\0';  /* end buffer */
+        return conv + 2;
+      }
+    }
+  }
+  luaL_argerror(L, 1,
+    lua_pushfstring(L, "invalid conversion specifier '%%%s'", conv));
+  return conv;  /* to avoid warnings */
+}
+
+
 static int os_date (lua_State *L) {
   const char *s = luaL_optstring(L, 1, "%c");
   time_t t = luaL_opt(L, (time_t)luaL_checknumber, 2, time(NULL));
-  struct tm *stm;
+  struct tm tmr, *stm;
   if (*s == '!') {  /* UTC? */
-    stm = gmtime(&t);
+    stm = l_gmtime(&t, &tmr);
     s++;  /* skip `!' */
   }
   else
-    stm = localtime(&t);
+    stm = l_localtime(&t, &tmr);
   if (stm == NULL)  /* invalid date? */
     lua_pushnil(L);
   else if (strcmp(s, "*t") == 0) {
@@ -146,17 +225,17 @@
     setboolfield(L, "isdst", stm->tm_isdst);
   }
   else {
-    char cc[3];
+    char cc[4];
     luaL_Buffer b;
-    cc[0] = '%'; cc[2] = '\0';
+    cc[0] = '%';
     luaL_buffinit(L, &b);
-    for (; *s; s++) {
-      if (*s != '%' || *(s + 1) == '\0')  /* no conversion specifier? */
-        luaL_addchar(&b, *s);
+    while (*s) {
+      if (*s != '%')  /* no conversion specifier? */
+        luaL_addchar(&b, *s++);
       else {
         size_t reslen;
         char buff[200];  /* should be big enough for any conversion result */
-        cc[1] = *(++s);
+        s = checkoption(L, s + 1, cc);
         reslen = strftime(buff, sizeof(buff), cc, stm);
         luaL_addlstring(&b, buff, reslen);
       }
diff -Naur /work/lua-5.1.5/src/luaconf.h lua-5_1_5/src/luaconf.h
--- /work/lua-5.1.5/src/luaconf.h	2008-02-11 08:25:08.000000000 -0800
+++ lua-5_1_5/src/luaconf.h	2014-11-27 10:32:27.052988495 -0800
@@ -1,5 +1,5 @@
 /*
-** $Id: luaconf.h,v 1.82.1.7 2008/02/11 16:25:08 roberto Exp $
+** $Id: luaconf.h,v 1.176.1.1 2013/04/12 18:48:47 roberto Exp $
 ** Configuration file for Lua
 ** See Copyright Notice in lua.h
 */
@@ -33,14 +33,26 @@
 #define LUA_WIN
 #endif

+#if defined(LUA_WIN)
+#define LUA_DL_DLL
+#define LUA_USE_AFORMAT		/* assume 'printf' handles 'aA' specifiers */
+#endif
+
 #if defined(LUA_USE_LINUX)
 #define LUA_USE_POSIX
 #define LUA_USE_DLOPEN		/* needs an extra library: -ldl */
 #define LUA_USE_READLINE	/* needs some extra libraries */
+#define LUA_USE_STRTODHEX	/* assume 'strtod' handles hex formats */
+#define LUA_USE_AFORMAT		/* assume 'printf' handles 'aA' specifiers */
+#define LUA_USE_LONGLONG	/* assume support for long long */
 #endif

 #if defined(LUA_USE_MACOSX)
 #define LUA_USE_POSIX
+#define LUA_USE_DLOPEN		/* does not need -ldl */
+#define LUA_USE_READLINE	/* needs an extra library: -lreadline */
+#define LUA_USE_STRTODHEX	/* assume 'strtod' handles hex formats */
+#define LUA_USE_AFORMAT		/* assume 'printf' handles 'aA' specifiers */
 #define LUA_DL_DYLD		/* does not need extra library */
 #endif

@@ -56,6 +68,7 @@
 #define LUA_USE_ISATTY
 #define LUA_USE_POPEN
 #define LUA_USE_ULONGJMP
+#define LUA_USE_GMTIME_R
 #endif


diff -Naur /work/lua-5.1.5/src/lua.h lua-5_1_5/src/lua.h
--- /work/lua-5.1.5/src/lua.h	2012-01-13 12:36:20.000000000 -0800
+++ lua-5_1_5/src/lua.h	2014-11-27 10:32:27.052988495 -0800
@@ -341,6 +341,7 @@
 LUA_API lua_Hook lua_gethook (lua_State *L);
 LUA_API int lua_gethookmask (lua_State *L);
 LUA_API int lua_gethookcount (lua_State *L);
+LUA_API int lua_gethookcountremaining (lua_State *L);


 struct lua_Debug {
